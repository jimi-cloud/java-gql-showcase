scalar Date

type ToolType {
    id: ID,
    type: String
    dailyRentalCharge: Float
    chargeWeekdays: Boolean
    chargeWeekends: Boolean
    chargeHolidays: Boolean
}

type ToolCode {
    id: ID
    code: String
}

type Brand {
    id: ID
    name: String
}


type Tool {
    id: ID
    toolCode: ToolCode
    toolType: ToolType
    brand: Brand
}

type RentalAgreement {
    id: ID
    tool: Tool
    discount: Float
    checkOutDate: Date
    rentalDays: Int
    dueDate: Date
    chargeDays: Int
    preDiscountCharge: Float
    discountAmount: Float
    finalCharge: Float
    dailyRentalCharge: Float
}

input RentalAgreementInput {
    toolId: Int!
    discount: Float!
    checkOutDate: Date!
    rentalDays: Int!
}

type Query {
    findToolById(id: ID): Tool
    findAllTools: [Tool]
    findToolsByBrandId(brandId: ID): [Tool]
    findToolsByToolTypeId(toolTypeId: ID): [Tool]
    findAllRentalAgreements: [RentalAgreement]
    findRentalAgreementById(id: ID): RentalAgreement
}

type Mutation {
    createRentalAgreement(rentalAgreementInput: RentalAgreementInput): RentalAgreement
}